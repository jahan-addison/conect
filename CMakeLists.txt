# conect is free software under GPL v3 -- see LICENSE for details.

cmake_minimum_required(VERSION 3.14)
# cmake_policy(SET CMP0127 OLD)

# See config.h.in for some more details.
project(conect VERSION 1.0.0.0 LANGUAGES CXX)


# Options: Things you can set via commandline options to cmake (e.g. -DENABLE_LTO=[ON|OFF])
option(ENABLE_WARNINGS_SETTINGS "Allow target_set_warnings to add flags and defines.
                                 Set this to OFF if you want to provide your own warning parameters." ON)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
include(ConfigSafeGuards)
include(Colors)
include(CTest)
include(Misc)
include(Warnings)

set(SOURCES          # All .cc files in project
    conect/gui.cc
    conect/engine.cc
    conect/board.cc
    conect/ai/stratzilla.cc
)

set(LIBRARY_NAME conect)

add_library(${LIBRARY_NAME} OBJECT ${SOURCES})

if (WIN32)
    set(SUBSYSTEM_LINKER_OPTIONS "-mwindows")
endif()

target_link_options(${LIBRARY_NAME} PUBLIC ${SUBSYSTEM_LINKER_OPTIONS})


# Lib needs its header files, and users of the library must also see these (PUBLIC).
target_include_directories(${LIBRARY_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/conect)

# NANOGUI
add_subdirectory(external/nanogui)
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")
target_include_directories(${LIBRARY_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/external/nanogui/include)
target_link_libraries(${LIBRARY_NAME} PUBLIC nanogui)

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
# include_directories(${NANOGUI_EXTRA_INCS})

target_set_warnings(${LIBRARY_NAME} ENABLE ALL DISABLE Annoying)
# target_compile_options(${LIBRARY_NAME} ... )  # For setting manually.

# Add executable
# If you add more executables, copy these lines accordingly.
add_executable(main conect/conect.cc)   # Name of exec. and location of file.
target_link_libraries(main PRIVATE ${LIBRARY_NAME})  # Link the executable to library (if it uses it).

target_set_warnings(main ENABLE ALL DISABLE Annoying) # Set warnings (if needed).

set_target_properties(
    ${LIBRARY_NAME} main
      PROPERTIES
        CXX_STANDARD 20
        CXX_STANDARD_REQUIRED YES
        CXX_EXTENSIONS NO
)

